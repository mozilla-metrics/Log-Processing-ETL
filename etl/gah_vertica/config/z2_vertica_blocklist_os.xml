<?xml version="1.0"?>
<!-- The contents of this file are subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this file,
   - You can obtain one at http://mozilla.org/MPL/2.0/.  -->
<GenericAggHandlerConfig>
	<Database>
		<Url>${VERTICA_GAH_DBURL}</Url>
		<Class>${VERTICA_DRIVER}</Class>
		<User>${VERTICA_USER}</User>
		<Pass>${VERTICA_PASS}</Pass>
	</Database>
	<AggregateInfo>
		<Table>a_th_blocklist_os</Table>
		<CreateTableStatement>

			CREATE TABLE "a_th_blocklist_os" (
				"dates_Year" int8 NOT NULL,
				"dates_Month" int8 NOT NULL,
				"dates_Day_of_month" int8,
				"dates_Date" varchar(10),
				"products_Name" varchar(20),
				"products_Version_major" varchar(7),
				"products_Version_string" varchar(19),
				"product_os_Platform" varchar(50),
				"product_os_Version" varchar(50),
				"blocklist_requests_by_day_Total_Requests" int8,
				"blocklist_requests_by_day_fact_count" int8)
				PARTITION BY "dates_Year" || '-Q' || ((("dates_Month" - 1) / 3) + 1);

			CREATE PROJECTION "a_th_blocklist_os_super" (
				"dates_Year",
				"dates_Month" ,
				"dates_Day_of_month" ,
				"dates_Date" ENCODING RLE,
				"products_Name" ENCODING RLE,
				"products_Version_major" ,
				"products_Version_string" ,
				"product_os_Platform" ENCODING RLE,
				"product_os_Version" ENCODING RLE,
				"blocklist_requests_by_day_Total_Requests" ,
				"blocklist_requests_by_day_fact_count" )
			as select
				"dates_Year",
				"dates_Month" ,
				"dates_Day_of_month" ,
				"dates_Date" ,
				"products_Name" ,
				"products_Version_major",
				"products_Version_string" ,
				"product_os_Platform",
				"product_os_Version",
				"blocklist_requests_by_day_Total_Requests" ,
				"blocklist_requests_by_day_fact_count"
			from "a_th_blocklist_os"
			ORDER BY 
				"dates_Year" ,
				"dates_Month",  
				"dates_Day_of_month", 
				"dates_Date",  
				"product_os_Platform", 
				"product_os_Version"
			SEGMENTED BY MODULARHASH("dates_Day_of_month") ALL NODES;

			CREATE PROJECTION "a_th_blocklist_os_super_buddy" (
				"dates_Year",
				"dates_Month" ,
				"dates_Day_of_month" ,
				"dates_Date" ENCODING RLE,
				"products_Name" ENCODING RLE,
				"products_Version_major" ,
				"products_Version_string" ,
				"product_os_Platform" ENCODING RLE,
				"product_os_Version" ENCODING RLE,
				"blocklist_requests_by_day_Total_Requests" ,
				"blocklist_requests_by_day_fact_count" )
			as select
				"dates_Year",
				"dates_Month" ,
				"dates_Day_of_month" ,
				"dates_Date" ,
				"products_Name" ,
				"products_Version_major",
				"products_Version_string" ,
				"product_os_Platform",
				"product_os_Version",
				"blocklist_requests_by_day_Total_Requests" ,
				"blocklist_requests_by_day_fact_count"
			from "a_th_blocklist_os"
			ORDER BY 
				"product_os_Platform", 
				"product_os_Version", 
				"dates_Year",
				"dates_Month",
				"dates_Day_of_month", 
				"dates_Date"
			SEGMENTED BY MODULARHASH("dates_Day_of_month") ALL NODES OFFSET 1;

CREATE PROJECTION a_th_blocklist_os_gecko_versio_p1
(
 "product_os_Platform" ENCODING RLE,
 "blocklist_requests_by_day_Total_Requests" ENCODING RLE,
 "dates_Year" ENCODING RLE,
 "products_Version_major" ENCODING RLE,
 "dates_Month" ENCODING RLE,
 "dates_Day_of_month",
 "dates_Date",
 "products_Name",
 "products_Version_string",
 "product_os_Version",
 blocklist_requests_by_day_fact_count
)
AS
SELECT "product_os_Platform",
       "blocklist_requests_by_day_Total_Requests",
       "dates_Year",
       "products_Version_major",
       "dates_Month",
       "dates_Day_of_month",
       "dates_Date",
       "products_Name",
       "products_Version_string",
       "product_os_Version",
       blocklist_requests_by_day_fact_count
FROM a_th_blocklist_os
ORDER BY "product_os_Platform",
         "blocklist_requests_by_day_Total_Requests",
         "dates_Year",
         "products_Version_major",
         "dates_Month"
SEGMENTED BY HASH(a_th_blocklist_os."blocklist_requests_by_day_Total_Requests", a_th_blocklist_os."blocklist_requests_by_day_fact_count") ALL NODES;

CREATE PROJECTION a_th_blocklist_os_gecko_versio_p1_b1
(
 "product_os_Platform" ENCODING RLE,
 "blocklist_requests_by_day_Total_Requests" ENCODING RLE,
 "dates_Year" ENCODING RLE,
 "products_Version_major" ENCODING RLE,
 "dates_Month" ENCODING RLE,
 "dates_Day_of_month",
 "dates_Date",
 "products_Name",
 "products_Version_string",
 "product_os_Version",
 blocklist_requests_by_day_fact_count
)
AS
SELECT "product_os_Platform",
       "blocklist_requests_by_day_Total_Requests",
       "dates_Year",
       "products_Version_major",
       "dates_Month",
       "dates_Day_of_month",
       "dates_Date",
       "products_Name",
       "products_Version_string",
       "product_os_Version",
       blocklist_requests_by_day_fact_count
FROM a_th_blocklist_os
ORDER BY "product_os_Platform",
         "blocklist_requests_by_day_Total_Requests",
         "dates_Year",
         "products_Version_major",
         "dates_Month"
SEGMENTED BY HASH(a_th_blocklist_os."blocklist_requests_by_day_Total_Requests", a_th_blocklist_os."blocklist_requests_by_day_fact_count") ALL NODES OFFSET 1;


		</CreateTableStatement>
		<TableExistsStatement>select 1 from a_th_blocklist_os limit 1 </TableExistsStatement>
		<DropTableStatement>drop table a_th_blocklist_os CASCADE</DropTableStatement>

		<!-- AggregateMode can be TRUNCATE or INCREMENT;
		
		TRUNCATE will issue a DROP TABLE and recreate it. 
		INCREMENT will try to find the new objects and insert only those 
		
		-->
		
		<AggregateMode>INCREMENT</AggregateMode>

		<!-- QueryOnFact and QueryOnAggregate must return a single column named "value" -->

		<QueryOnFact>
			SELECT distinct d.date as value FROM blocklist_requests_by_day f inner join dates d on d.date_id=f.utc_date_id
		</QueryOnFact>
		<QueryOnAggregate>
			SELECT distinct a.dates_Date as value FROM a_th_blocklist_os a;
		</QueryOnAggregate>
		<QuoteValue>true</QuoteValue>
		<IncrementQuery>

			INSERT /*+ direct */ INTO "a_th_blocklist_os" (
				"dates_Year",
				"dates_Month",
				"dates_Day_of_month",
				"dates_Date",
				"products_Name",
				"products_Version_major",
				"products_Version_string",
				"product_os_Platform",
				"product_os_Version",
				"blocklist_requests_by_day_Total_Requests",
				"blocklist_requests_by_day_fact_count")
			select 
				"dates"."year" as "dates_Year", 
				"dates"."month" as "dates_Month", 
				"dates"."day_of_month" as "dates_Day_of_month", 
				"dates"."date" as "dates_Date", 
				"products"."product_name" as "products_Name", 
				"products"."formatted_version_major" as "products_Version_major", 
				left("products"."product_version",19) as "products_Version_string", 
				"operating_systems"."product_os_platform" as "product_os_Platform", 
				"operating_systems"."product_os_version" as "product_os_Version", 
				sum("blocklist_requests_by_day_th"."requests") as "blocklist_requests_by_day_Total_Requests", 
				count(*) as "blocklist_requests_by_day_fact_count"
			from 
				"blocklist_requests_by_day_th" as "blocklist_requests_by_day_th", 
				"dates" as "dates", 
				"products" as "products", 
				"operating_systems" as "operating_systems"
				${INCREMENT_CONDITION_FROM}
			where 
				"blocklist_requests_by_day_th"."utc_date_id" = "dates"."date_id" and 
				"blocklist_requests_by_day_th"."product_id" = "products"."product_id" and 
				"blocklist_requests_by_day_th"."os_id" = "operating_systems"."os_id"
				and "dates"."date" IN (${INCREMENT_LIST})
				${INCREMENT_CONDITION_WHERE}
			group by 
				"dates"."year", 
				"dates"."month", 
				"dates"."day_of_month", 
				"dates"."date", 
				"products"."product_name", 
				"products"."formatted_version_major", 
				"products"."product_version", 
				"operating_systems"."product_os_Platform", 
				"operating_systems"."product_os_Version";

		</IncrementQuery>
		
		<InsertQuery>

			INSERT /*+ direct */ INTO "a_th_blocklist_os" (
				"dates_Year",
				"dates_Month",
				"dates_Day_of_month",
				"dates_Date",
				"products_Name",
				"products_Version_major",
				"products_Version_string",
				"product_os_Platform",
				"product_os_Version",
				"blocklist_requests_by_day_Total_Requests",
				"blocklist_requests_by_day_fact_count")
			select 
				"dates"."year" as "dates_Year", 
				"dates"."month" as "dates_Month", 
				"dates"."day_of_month" as "dates_Day_of_month", 
				"dates"."date" as "dates_Date", 
				"products"."product_name" as "products_Name", 
				"products"."formatted_version_major" as "products_Version_major", 
				left("products"."product_version",19) as "products_Version_string", 
				"operating_systems"."product_os_platform" as "product_os_Platform", 
				"operating_systems"."product_os_version" as "product_os_Version", 
				sum("blocklist_requests_by_day_th"."requests") as "blocklist_requests_by_day_Total_Requests", 
				count(*) as "blocklist_requests_by_day_fact_count"
			from 
				"blocklist_requests_by_day_th" as "blocklist_requests_by_day_th", 
				"dates" as "dates", 
				"products" as "products", 
				"operating_systems" as "operating_systems"
			where 
				"blocklist_requests_by_day_th"."utc_date_id" = "dates"."date_id" and 
				"blocklist_requests_by_day_th"."product_id" = "products"."product_id" and 
				"blocklist_requests_by_day_th"."os_id" = "operating_systems"."os_id"
			group by 
				"dates"."year", 
				"dates"."month", 
				"dates"."day_of_month", 
				"dates"."date", 
				"products"."product_name", 
				"products"."formatted_version_major", 
				"products"."product_version", 
				"operating_systems"."product_os_Platform", 
				"operating_systems"."product_os_Version";
			SELECT PARTITION_TABLE('a_th_blocklist_os');

		</InsertQuery>

		<!--
			
		IncrementConditionFrom and IncrementConditionWhere are javascript functions who's 
		output will be inserted in the incremental query condition, in the place of the
		token ${INCREMENT_CONDITION_FROM} and ${INCREMENT_CONDITION_WHERE}

		Use when extra filtering logic is needed, like exclude today's date from the list of info
		to be extracted, eg:

		<IncrementConditionWhere>
			<![CDATA[
			var a = function(){
				var now  = new Date();
				return " and  date <= " +  (now.getYear()+ 1900) + "-" + (now.getMonth()+1) + "-" + now.getDate()
			}
			a()
			]]>
		</IncrementConditionWhere>

		-->

		<IncrementConditionFrom/>
		<IncrementConditionWhere/>

	</AggregateInfo>
	
</GenericAggHandlerConfig>
